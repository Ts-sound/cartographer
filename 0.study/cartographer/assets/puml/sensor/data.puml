@startuml


/' Objects '/

    abstract class Data {
        +{abstract} GetTime() : time
        +GetSensorId() : string
        +{abstract} AddToTrajectoryBuilder(*trajectory_builder) : void
    }


    class Dispatchable<DataType> {
        +data() : DataType&
    }

    class CollatorInterface{
        +{abstract} AddTrajectory(trajectory_id,expected_sensor_ids,callback):void 
        +{abstract} FinishTrajectory(trajectory_id):void 
        +{abstract} AddSensorData(trajectory_id,data):void
    }

    class Collator{}
    
    class TrajectoryCollator{}

    class OrderedMultiQueue{}


namespace mapping{
    class TrajectoryBuilderInterface{}
}









' 继承 son --|> father
'
Dispatchable --|> Data


' 接口实现 driver ..|> driverinterface
'
Collator  ..|> CollatorInterface
TrajectoryCollator ..|> CollatorInterface



' 聚合 Car *-- Engine , strong lifecycle,week : o--


Collator *-- OrderedMultiQueue

OrderedMultiQueue o-- Dispatchable
OrderedMultiQueue *-- common.BlockingQueue
TrajectoryCollator  *-- OrderedMultiQueue

' 依赖 Dependency  Car --> GPS strong,week:..>
CollatorInterface  ..>  Data

Dispatchable ..> mapping.TrajectoryBuilderInterface



/' Nested objects '/



@enduml

